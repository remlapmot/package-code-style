---
title: "Coding styles for using R packages"
author: "TP"
date: "2022-07-06"
---

## Intro

We will discuss the options for how to call R packages in an R script.

## 1. Using `library()`

* Pros
  * The original way to code R scripts
  * `library()` loads then attaches a package making all the exported functions in a package available to you (see [here](https://r-pkgs.org/dependencies.html#sec-search-path) for the difference between loading and attaching)
  * More succinct code

    ```{r, eval=FALSE, include=FALSE}
    # Generate some sample data, then compute mean and standard deviation
    # in each group
    df <- data.frame(
      gp = factor(rep(letters[1:3], each = 10)),
      y = rnorm(30)
    )
    ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
      data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
    }))
    ```
    
    ::: panel-tabset
    ## `library()`
    
    ``` r
    library(ggplot2)
      
    ggplot(df, aes(gp, y)) +
      geom_point() +
      geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
    ```
    
    ## Qualifying namespace
    
    ``` r
    ggplot2::ggplot(df, ggplot2::aes(gp, y)) +
      ggplot2::geom_point() +
      ggplot2::geom_point(data = ds, ggplot2::aes(y = mean), 
                          colour = 'red', size = 3)
    ```  
    
    :::

* Cons
  * Arguably unclear which package each function call comes from
  * Functions can be masked when additional packages with functions with the same name are attached, e.g. after loading the tidyverse calling `filter()` uses `dplyr::filter()` instead of `stats::filter()`

    ```{r}
    library(tidyverse)
    ```

## 2. Using namespace prefix / qualifying namespaces

* Pros
  * Clear which package every function comes from
* Cons
  * More verbose/longer code (and easy to forget to prefix every function call e.g. `aes()`). See example above
  * Each prefixed function call is very slightly slower than the equivalent unprefixed function call (see [here](https://r-pkgs.org/dependencies.html#run-time-vs-develop-time-dependencies))

## Additional points

* _**Point of confusion**_: are you or is the advice you are reading referring to coding an analysis script or the function in a package?
  * The tidyverse style guide uses `library()` calls at the top of their R scripts (see [here](https://style.tidyverse.org/files.html?q=library#internal-structure))
  * Package name prefixing is recommended within the R files of a package for CRAN. This is when you are importing functions from another package rather than the whole package (and you should never really import the whole package), see [here](https://r-pkgs.org/dependencies.html#import-r)
  * The Google R style guide also requires package prefixing (although it is unclear whether this refers to coding scripts or packages), see [here](https://google.github.io/styleguide/Rguide.html#qualifying-namespaces)
* To access unexported functions from a package under both approaches you need to use triple colon syntax, i.e., 

    ```r
    package:::unexportedfunction(...)
    ```  
